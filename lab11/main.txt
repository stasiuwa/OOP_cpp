#include <iostream>
#include <memory>
#include <vector>

#include "lab11/Buffer.h"
#include "lab11/BufferArr.h"
#include "lab11/BufferFile.h"

#include "lab11/Warehouse.h"
#include "lab11/Shop.h"

using namespace std;

int main(){
//    10.2
    std::unique_ptr<Shop> shop1(new Shop("Amazon"));
    std::unique_ptr<Shop> shop2(new Shop("Januszex"));
    std::unique_ptr<Shop> shop3(new Shop("Allegro"));

    std::shared_ptr<Warehouse> w1(new Warehouse("drugs", 12));
    std::shared_ptr<Warehouse> w2(new Warehouse("alcohol", 8));
    std::shared_ptr<Warehouse> w3(new Warehouse("laptops", 20));
    std::shared_ptr<Warehouse> w4(new Warehouse("beds", 15));
    std::shared_ptr<Warehouse> w5(new Warehouse("books", 40));
    std::shared_ptr<Warehouse> w6(new Warehouse("clothes", 60));
    std::shared_ptr<Warehouse> w7(new Warehouse("shoes", 30));
    std::shared_ptr<Warehouse> w8(new Warehouse("shoes", 20));

    shop1->addWarehouse(w1);
    shop1->addWarehouse(w3);
    shop1->addWarehouse(w5);
    shop1->addWarehouse(w7);
    shop1->addWarehouse(w8);
    shop1->addWarehouse(w2);

    shop2->addWarehouse(w4);
    shop2->addWarehouse(w2);
    shop2->addWarehouse(w8);
    shop2->addWarehouse(w6);

    shop3->addWarehouse(w5);
    shop3->addWarehouse(w6);
    shop3->addWarehouse(w1);
    shop3->addWarehouse(w2);
    shop3->addWarehouse(w4);

    std::vector<unique_ptr<Shop>> shops;
    shops.push_back(std::move(shop1));
    shops.push_back(std::move(shop2));
    shops.push_back(std::move(shop3));

    for(const auto& shop : shops )
    {
        shop->showName();
        shop->showWarehouses();
        shop->sellItem("books", 40);
        shop->sellItem("clothes", 69);
        shop.get();
    }

//    10.1
    vector<unique_ptr<Buffer>> buffer_array;

    unique_ptr<BufferArr> b1 (new BufferArr(3));
    b1->add(4);
    b1->add(2);
    b1->add(0);

    unique_ptr<BufferArr> b2 (new BufferArr(2));
    b2->add(6);
    b2->add(9);

    unique_ptr<BufferFile> b3 (new BufferFile("test.txt"));
    b3->add(2);
    b3->add(1);
    b3->add(3);
    b3->add(7);

    buffer_array.push_back(std::move(b1));
    buffer_array.push_back(std::move(b2));
    buffer_array.push_back(std::move(b3));

    for(const auto& b : buffer_array ) b->write();
    return 0;
}