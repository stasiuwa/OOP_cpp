
#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <limits>
#include <vector>
#include <algorithm>
#include <regex>

using namespace std;

/**
 * @brief Funkcja do walidacji danych. \n
 * Próbuje wczytać dane z wejścia od użytkownika, w przypadku błędu informuje o tym i prosi o poprawienie danych. \n
 * Wersja ogólna dla wszystkich typów
 * @tparam T typ danych do wczytania
 * @return wczytane poprawnie dane
 */
template <typename T>
T validate(){
    T temp;
    while (!(cin>>temp)) {
        cout<<"Zle dane,popraw: ";
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(),'\n');
    }
    return temp;
}
/**
 * @brief Specjalizacja funkcji do walidacji danych \n
 * posiada dodatkowa logikę sprawdzającą czy do strumienia przekazywana jest całkowita liczba dodatnia
 * @return wczytane poprawnie dane typu int
 */
template <>
int validate() {
    int num;
    while (!(cin>>num)) {
        cout<<"Zle dane, popraw: ";
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(),'\n');
    }
    while (num<=0){
        cout<<"Podano liczbe <= 0, poprawdane: ";
        num = validate<int>();
    }
    return num;
}
//9.1
void kasingkomentarze(){
    try {
        ifstream fileIf("E:\\studia\\CLionProjects\\Adv_OOP_C++\\lab9\\code.txt");

        if(!fileIf.is_open()){
            cerr<<"Nie znaleziono pliku!"<<endl;
            exit(1);
        }

        char currChar, nextChar;

        while (fileIf.get(currChar)){
            if(currChar == '/') {
                nextChar = fileIf.peek();
                if(nextChar == '/') fileIf.ignore(numeric_limits<streamsize>::max(),'\n');
                else cout<<currChar;
            }
            else cout<<currChar;
        }
        fileIf.close();
    } catch(exception &e) {
        cerr<<"erororo: " << e.what() << endl;
        exit(1);
    }
}
//     9.2
class lilEyeException: public exception {
public:
    char* what() { return "!!\tprzekroczono 21\t!!";}
};

void lilEye(){

    int sum=0, num, karty=0;
    while (sum<21) {
        cout << "Wynik: " << sum << "\tstrzaly: "<<karty<<"\tkarta:";
        num = validate<int>();
        try {
            sum += num;
            if (sum > 21) throw lilEyeException();
        }
        catch (lilEyeException &e) {
            sum-=num;
            cout << e.what() << "\n ostatni strzal \nsuma=" << sum << "\tpoddaj liczbe: ";
            num = validate<int>();
            sum += num;
        }
        karty++;
    }
    if(sum==21) cout<<"\n\twygrana, strzaly: "<<karty<<endl;
    else cout<<"\n\tniewygrana, strzaly: "<<karty<<endl;

}

//9.3
class Student {
public:
    string imie, nazwisko, email;
    char plec;
    int ocena;

    Student(const string &imie, const string &nazwisko, char plec, int ocena, const string &email) : imie(imie),
                                                                                                     nazwisko(nazwisko),
                                                                                                     plec(plec),
                                                                                                     ocena(ocena),
                                                                                                     email(email)   {}
};

vector<Student> loadCSV(string filename) {
    vector<Student> students;
    ifstream fileIf(filename);

    if (!fileIf.is_open()) {
        cerr<<"Nie udalo sie otworzyc pliku!"<< filename << endl;
        exit(1);
    }

    string line;
    getline(fileIf, line); //pominięcie nagłówka
    while (getline(fileIf, line)) {
        vector<string> result;
        stringstream ss(line);
        while (ss.good()){
            string substr;
            getline(ss,substr,';');
            result.push_back(substr);
        }
        if (result.size()>=4) {
            Student s1 = {result[0], result[1], result[2][0], stoi(result[3]),result.size()==5 ? result[4] : ""};
            students.push_back(s1);
        }

    }
    fileIf.close();
    return students;
}
void saveCSV(string filename, vector<Student> students){
    ofstream file(filename, ios::trunc);
    for(Student s : students){
        string line=s.imie + ";" + s.nazwisko + ";" + s.plec + ";" + to_string(s.ocena) + ";" + s.email;
        file << line;
    }
    file.close();
    cout<<"Zapisano do pliku"<<filename<<endl;
}
void showStudents(vector<Student> students){
    const int width=20;
    cout<<left<<setw(width)<<"Imie"<<setw(width)<<"Nazwisko"<<setw(width)<<"Plec"<<setw(width)<<"Ocena"<<setw(width)<<"email"<<endl;
    for(Student s : students) cout<<left<<setw(width)<<s.imie<<setw(width)<<s.nazwisko<<setw(width)<<s.plec<<setw(width)<<s.ocena<<setw(width)<<s.email<<endl;
}
void addStudent(vector<Student> &students) {
    string pytania[5] = {" Imie: ", " Nazwisko: ", " Plec(K/M): ", " ocena: ", " email: "};
    string odpowiedzi[5];
    regex nameRegex("[A-Z][a-zA-Z]*");
    regex genderRegex("[KM]");
    regex scoreRegex("[2-5]");
    regex emailRegex(R"([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})");
    regex regexes[5] = {nameRegex, nameRegex, genderRegex, scoreRegex, emailRegex};
    for (int i=0; i<5; i++){
        do{
            cout<<pytania[i];
            cin>>odpowiedzi[i];
        } while (!regex_match(odpowiedzi[i], regexes[i]));
    }
    Student s = {odpowiedzi[0], odpowiedzi[1], odpowiedzi[2][0], stoi(odpowiedzi[3]), odpowiedzi[4]};
    students.push_back(s);
}
void showSurname(vector<Student> students,string surname) {
    vector<Student> temp;
    for ( Student s : students) {
        if(s.nazwisko == surname){

            temp.push_back(s);
        }
    }
    if(temp.size()==0){
        cout<<"Nieznaleziono studenta: "<<surname<<endl;
        return;
    }
    cout<<"ZNALEZIONY STUDENT"<<endl;
//            cout<<s.imie<<"\t"<<s.nazwisko<<endl;
    showStudents(temp);
}
void saveToFiles(vector<Student> students) {
    ofstream fileK("k.csv"), fileM("m.csv");
    fileK << "Imie;Nazwisko;Plec;Ocena;Email" << endl;
    fileM << "Imie;Nazwisko;Plec;Ocena;Email" << endl;

    for(Student s : students){
        string line=s.imie + ";" + s.nazwisko + ";" + s.plec + ";" + to_string(s.ocena) + ";" + s.email;
        (s.plec == 'K') ? fileK<<line<<endl : fileM<<line<<endl;
    }
    fileK.close();
    fileM.close();
    cout<<"Zapisano do plikow k.csv i m.csv"<<endl;
}
void showFirstX(vector<Student> students, int x) {
    vector<Student> temp;
    for (int i=0; i<x; i++){
        temp.push_back(students.at(i));
    }
    showStudents(temp);
}
bool sortStudents(Student s1, Student s2){
    return s1.ocena < s2.ocena;
}
void studenci(){
    string filename, surname;
    int x;
    cout<<"Podaj sciezke do pliku (dwa\\):";
    filename = validate<string>();

    vector<Student> studenci = loadCSV(filename);

    int option;
    do {
        cout << "\nOpcje:\n"
             << "[1] Wyswietl\n"
             << "[2] Dodaj\n"
             << "[3] osoby o podanym nazwisku\n"
             << "[4] Zapis do k.csv i m.csv\n"
             << "[5] Wyswietl X pierwszych studentow\n"
             << "[6] sortuj studentow wzgledem oceny rosnaco\n"
             << "[7] exit\n"
             << "Wybierz opcje: ";
        option = validate<int>();

        switch (option) {
            case 1:
                showStudents(studenci);
                break;
            case 2:
                addStudent(studenci);
                break;
            case 3:
                cout<<"Podaj szukane nazwisko";
                surname = validate<string>();
                showSurname(studenci,surname);
                break;
            case 4:
                saveToFiles(studenci);
                break;
            case 5:
                cout<<"Ilu studentow wyswietlic?(x):";
                x = validate<int>();
                showFirstX(studenci,x);
                break;
            case 6:
                sort(studenci.begin(), studenci.end(), sortStudents);
                break;
            case 7:
                saveCSV(filename,studenci);
                exit(0);
            default:
                cout<<"Zla opcja!"<<endl;
        }
    } while (option!=0);
}
int main() {
    studenci();
//    9.3
//    ifstream file;
//    file.open("E:\\studia\\CLionProjects\\Adv_OOP_C++\\lab9\\dane.csv");
//    if (!file.is_open())
//    {
//        cerr << "Nie udalo sie otworzyc pliku!" << endl;
//        return 1;
//    }
//
//    string line;
//    getline(file, line);
//    cout << line << endl;
//
//    while (getline(file, line))
//    {
//        cout << line << endl;
//    }
//
//    file.close();


//    int a = 223;
//    float b = 21.365;
//    cout << "dec: "<<dec<<a<<endl;
//
//    cout<<"hex bez showbase: " <<hex<<a<<endl;
//    cout<<"hex z showbase: " <<showbase<<a<<endl;
//    cout<<"oct showbase: " <<oct<<a<<endl;
//    cout<<"oct z showbase: " <<noshowbase<<a<<endl;
//
//    cout<<"dec z showpos" <<dec<<showpos<<a<<endl;
//
//    cout<<"scientific: " <<scientific<<b<<endl;
//    cout<<"setw z ritght: " <<setw(20)<<a<<endl;
//    cout<<"setw z left i setfill: " <<setw(20)<<left<<setfill('*')<<a<<endl;
//    cout <<"setprecision 3: "<<resetiosflags(ios::scientific)<<setprecision(3)<<b<<endl;

//    string l1,l2,l3="Ala Nowak";
//    int num;
//    cout<<"Konwersja: "<<endl;
//    istringstream isstream("123");
//    isstream >> num;
//    cout<<num<<endl;
//    ostringstream osstream;
//    osstream << 123;
//    l1=osstream.str();
//    cout << l1<< endl;
//    ostringstream osstream1;
//    osstream1<< "Laboratorium " << 9 << ", zostalo jeszcze "<<6<<endl;
//    cout << "Formatowanie: "<<osstream1.str();
//    string stringEx;
//    int numberIntEx;
//    float numberFloatEx;
//    istringstream isstream1("Ala 10 3.45");
//    isstream1 >> stringEx >> numberIntEx >> numberFloatEx;
//    if(isstream1.fail()) {
//        cout << "Parsowanie nie udalo sie" << endl;
//        } else {
//        cout<< "Parsowanie udalo sie:" << endl;
//        cout<<"Napis: "<< stringEx << endl;
//        cout<<"Liczba int: "<<numberIntEx<< endl;
//        cout<<"Liczba float: "<<numberFloatEx <<endl;
//    }
//    istringstream ss(l3);
//    getline(ss, l1, ' ');
//    getline(ss, l2, ' ');
//    cout<<l1<<" "<<l2<<endl;

//    ofstream  fileOf;
//    fileOf.open("Plik.txt");
//    if(fileOf.is_open()){
//        cout<<"Plik otworzyl sie poprawnie"<<endl;
//        fileOf<<"8 Ala ma kota"<<endl;
//        fileOf<<"a kot ma Ale"<<endl;
//        fileOf<<10<<endl;
//        fileOf<<1.1<<endl;
//        fileOf<<'a'<<endl;
//        fileOf.close();
//    } else {
//        cerr<<"Blad rpzy otwieraniu pliku"<<endl;
//    }

//    ifstream fileIf;
//    fileIf.open("Plik.txt");
//
//    int number;
//    fileIf>>number;
//    string line;
//    fileIf>>line;
//    cout<< number << " " << line <<endl;
//
//    string line1, line2;
//    getline(fileIf,line1);
//    getline(fileIf,line2);
//
//    cout<<line1<<endl<<line2<<endl;
//
//    char c;
//    c=fileIf.get();
//    cout<<c<<endl;
//
//    while(!fileIf.eof()) {
//        getline(fileIf, line1);
//        cout<<line1<<endl;
//    }
//
//    //alternatywna wersja
//    while (getline(fileIf,line1)) cout<<line1<<endl;
//
//    fileIf.close();

    return 0;
}