#include <iostream>
#include <set>
#include <algorithm>
#include <map>

using namespace std;

void showSet( set<int> s)
{
    set<int>::iterator itr;
    for (itr = s.begin(); itr != s.end(); itr++) {
        cout<<*itr<<" ";
    }
    cout<<endl;
}
void showMap( map<string, int > m){
    cout<<endl<<"mapa: "<<endl;
    map<string,int>::iterator it;
    for (it = m.begin(); it != m.end() ; it++) {
        cout<< it->first << " "<< it->second<<endl;
    }
    cout<<endl;
}
map<string,int>::iterator searchByValue(map<string,int> &m, int val){
    map<string,int>::iterator it;
    for(it=m.begin(); it!=m.end(); it++) if(it->second == val) break;
    return it;
}

int main(){
    set <int> s;
    s.insert(1);
    s.insert(2);
    s.insert(3);
    s.insert(7);
    s.insert(3);

    show(s);

    s.erase(s.begin(), s.find(2));
    show(s);
    s.erase(2);
    show(s);
    cout<<s.count(2)<<endl;

    set<int> s1={1,2,3,7};
    set<int> s2={-2,5,1,7,6};
    cout<<"s1: ";
    show(s1);
    cout<<"s2: ";
    show(s2);
    set <int> sUnion, sIntersec, sDifffer;

    set_union(s1.begin(), s1.end(), s2.begin(), s2.end(), insert_iterator(sUnion,sUnion.begin()));
    set_intersection(s1.begin(), s1.end(), s2.begin(), s2.end(), insert_iterator(sIntersec, sIntersec.begin()));
    set_difference(s1.begin(), s1.end(), s2.begin(), s2.end(), insert_iterator(sDifffer, sDifffer.begin()));

    cout<<"sUnion: ";
    show(sUnion);
    cout<<"sIntersec: ";
    show(sIntersec);
    cout<<"sDiffer: ";
    show(sDifffer);

    set<int> s3={3,8};
    show(s3);
    pair<set<int>::iterator, bool> res;
    res=s3.insert(6);
    cout<<"Dodany element: "<<*(res.first)<<endl;
    cout<<"Czy element dodany? "<<res.second<<endl;
    show(s3);

    map<string,int> m;
    m.insert(pair<string,int>("Zdun",4500));
    m.insert(make_pair("Lecina", 2200));
    m["Jarzyna"]=2137-1337;
    showMap(m);
    int salary=m.find("Zdun")->second;
    cout<<"Zarobki Zduna: "<<salary<<endl;
    m.erase("Jarzyna");
    showMap(m);
    cout<<"Czy jest Lecina? "<<m.count("Lecina")<<endl;

    pair<string,int> el=*m.begin();
    cout<<"Klucz: "<<el.first<<" wartosc: "<<el.second<<endl;

    auto it1= searchByValue(m,2200);
    //map<string,int>::iterator it2= searchByValue(m,2200);
    if(it1 != m.end()) cout<<"Element znaleziony: "<<it1->first<<" "<<it1->second;
    else cout<<"Brak elementu"<<endl;


    return 0;
}